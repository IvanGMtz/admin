<?php

namespace AppBundle\Entity;

use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Avanzu\AdminThemeBundle\Model\UserInterface as ThemeUser;
use Vich\UploaderBundle\Mapping\Annotation as Vich;
use Symfony\Component\HttpFoundation\File\File as File;
use AppBundle\Entity\Cycle;

/**
 * @ORM\Entity
 * @ORM\Table(name="fos_user")
 * @Vich\Uploadable
 */
class FosUser extends BaseUser implements ThemeUser
{
    /**
    * @ORM\Id
    * @ORM\Column(type="integer")
    * @ORM\GeneratedValue(strategy="AUTO")
    */
     protected $id;

     public function getIdentifier() {
       return $this->id;
     }

     public function getMemberSince() {

     }

     public function getTitle() {
     }

     public function isOnline() {
     }

    /**
     * @var string
     */
    private $name;

    /**
     * @var string
     */
    private $address;

    /**
     * @var string
     */
    private $phone;

    /**
     * @var string
     */
    private $docType;

    /**
     * @var string
     */
    private $doc;

    /**
     * @var \DateTime
     */
    private $birthday;

    /**
     * @var float
     */
    private $balance = '0.00';

    /**
     * @var string
     */
    private $serial;

    /**
     * @var boolean
     */
    private $changePassword = '1';

    /**
     * @var boolean
     */
    private $verified = '0';

    /**
     * @var string
     */
    private $wallet;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $sons;

    /**
     * @var \AppBundle\Entity\FosUser
     */
    private $parent;

    /**
     * @var \AppBundle\Entity\City
     */
    private $city;

    /**
     * @var \AppBundle\Entity\Country
     */
    private $country;
    
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $referrals;
    
    /**
     * @var string|null
     */
    private $docFront;

    /**
     * @var string|null
     */
    private $docBack;

    /**
     * @var string|null
     */
    private $bankCert;

    /**
     * @var string|null
     */
    private $bankAccount;

    /**
     * @var string|null
     */
    private $bankHolder;

    /**
     * @var string|null
     */
    private $bankType;

    /**
     * @var bool|null
     */
    private $isInBinary = 0;

    /**
     * @var bool|null
     */
    private $isDocChecked = 0;

    /**
     * @var \DateTime|null
     */
    private $updatedAt;
    
    /**
     * @var string|null
     */
    private $image;
    
    /**
     * @var float|null
     */
    private $binaryBalance = 0;

    /**
     * @var float|null
     */
    private $binaryCeil;

    /**
     * @var bool|null
     */
    private $isBinaryOverflow = false;
    
    /**
     * @var string|null
     */
    private $nivel;

    /**
     * Constructor
     */
    public function __construct()
    {
        parent::__construct();
        $this->sons = new \Doctrine\Common\Collections\ArrayCollection();
        $this->referrals = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return FosUser
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set address
     *
     * @param string $address
     *
     * @return FosUser
     */
    public function setAddress($address)
    {
        $this->address = $address;

        return $this;
    }

    /**
     * Get address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->address;
    }

    /**
     * Set phone
     *
     * @param string $phone
     *
     * @return FosUser
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set docType
     *
     * @param string $docType
     *
     * @return FosUser
     */
    public function setDocType($docType)
    {
        $this->docType = $docType;

        return $this;
    }

    /**
     * Get docType
     *
     * @return string
     */
    public function getDocType()
    {
        return $this->docType;
    }

    /**
     * Set doc
     *
     * @param string $doc
     *
     * @return FosUser
     */
    public function setDoc($doc)
    {
        $this->doc = $doc;

        return $this;
    }

    /**
     * Get doc
     *
     * @return string
     */
    public function getDoc()
    {
        return $this->doc;
    }

    /**
     * Set birthday
     *
     * @param \DateTime $birthday
     *
     * @return FosUser
     */
    public function setBirthday($birthday)
    {
        $this->birthday = $birthday;

        return $this;
    }

    /**
     * Get birthday
     *
     * @return \DateTime
     */
    public function getBirthday()
    {
        return $this->birthday;
    }

    /**
     * Set balance
     *
     * @param float $balance
     *
     * @return FosUser
     */
    public function setBalance($balance)
    {
        $this->balance = $balance;

        return $this;
    }

    /**
     * Get balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->balance;
    }

    /**
     * Set serial
     *
     * @param string $serial
     *
     * @return FosUser
     */
    public function setSerial($serial)
    {
        $this->serial = $serial;

        return $this;
    }

    /**
     * Get serial
     *
     * @return string
     */
    public function getSerial()
    {
        return $this->serial;
    }

    /**
     * Set changePassword
     *
     * @param boolean $changePassword
     *
     * @return FosUser
     */
    public function setChangePassword($changePassword)
    {
        $this->changePassword = $changePassword;

        return $this;
    }

    /**
     * Get changePassword
     *
     * @return boolean
     */
    public function getChangePassword()
    {
        return $this->changePassword;
    }

    /**
     * Set verified
     *
     * @param boolean $verified
     *
     * @return FosUser
     */
    public function setVerified($verified)
    {
        $this->verified = $verified;

        return $this;
    }

    /**
     * Get verified
     *
     * @return boolean
     */
    public function getVerified()
    {
        return $this->verified;
    }

    /**
     * Set wallet
     *
     * @param string $wallet
     *
     * @return FosUser
     */
    public function setWallet($wallet)
    {
        $this->wallet = $wallet;

        return $this;
    }

    /**
     * Get wallet
     *
     * @return string
     */
    public function getWallet()
    {
        return $this->wallet;
    }

    /**
     * Add son
     *
     * @param \AppBundle\Entity\FosUser $son
     *
     * @return FosUser
     */
    public function addSon(\AppBundle\Entity\FosUser $son)
    {
        $this->sons[] = $son;

        return $this;
    }

    /**
     * Remove son
     *
     * @param \AppBundle\Entity\FosUser $son
     */
    public function removeSon(\AppBundle\Entity\FosUser $son)
    {
        $this->sons->removeElement($son);
    }

    /**
     * Get sons
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSons($enabled = true)
    {
      if($enabled){
        $hijos = [];
        foreach($this->sons as $s){
          if($s->isEnabled()){
            array_push($hijos, $s);
          }
        }
        return $hijos;
      }
      return $this->sons;
    }

    /**
     * Set parent
     *
     * @param \AppBundle\Entity\FosUser $parent
     *
     * @return FosUser
     */
    public function setParent(\AppBundle\Entity\FosUser $parent = null)
    {
        $this->parent = $parent;

        return $this;
    }

    /**
     * Get parent
     *
     * @return \AppBundle\Entity\FosUser
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Set city
     *
     * @param \AppBundle\Entity\City $city
     *
     * @return FosUser
     */
    public function setCity(\AppBundle\Entity\City $city = null)
    {
        $this->city = $city;

        return $this;
    }

    /**
     * Get city
     *
     * @return \AppBundle\Entity\City
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Set country
     *
     * @param \AppBundle\Entity\Country $country
     *
     * @return FosUser
     */
    public function setCountry(\AppBundle\Entity\Country $country = null)
    {
        $this->country = $country;

        return $this;
    }

    /**
     * Get country
     *
     * @return \AppBundle\Entity\Country
     */
    public function getCountry()
    {
        return $this->country;
    }
    /**
     * @var string|null
     */
    private $parentSerial;


    /**
     * Set parentSerial.
     *
     * @param string|null $parentSerial
     *
     * @return FosUser
     */
    public function setParentSerial($parentSerial = null)
    {
        $this->parentSerial = $parentSerial;

        return $this;
    }

    /**
     * Get parentSerial.
     *
     * @return string|null
     */
    public function getParentSerial()
    {
        return $this->parentSerial;
    }

    /**
     * Set image.
     *
     * @param string|null $image
     *
     * @return FosUser
     */
    public function setImage($image = null)
    {
        $this->image = $image;

        return $this;
    }

    /**
     * Get image.
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->image;
    }
    
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $payments;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $cycles;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $cyclesAsFather;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $cyclesAsGrandpa;


    /**
     * Add payment.
     *
     * @param \AppBundle\Entity\Payment $payment
     *
     * @return FosUser
     */
    public function addPayment(\AppBundle\Entity\Payment $payment)
    {
        $this->payments[] = $payment;

        return $this;
    }

    /**
     * Remove payment.
     *
     * @param \AppBundle\Entity\Payment $payment
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removePayment(\AppBundle\Entity\Payment $payment)
    {
        return $this->payments->removeElement($payment);
    }

    /**
     * Get payments.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPayments()
    {
        return $this->payments;
    }

    /**
     * Add cycle.
     *
     * @param \AppBundle\Entity\Cycle $cycle
     *
     * @return FosUser
     */
    public function addCycle(\AppBundle\Entity\Cycle $cycle)
    {
        $this->cycles[] = $cycle;

        return $this;
    }

    /**
     * Remove cycle.
     *
     * @param \AppBundle\Entity\Cycle $cycle
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeCycle(\AppBundle\Entity\Cycle $cycle)
    {
        return $this->cycles->removeElement($cycle);
    }

    /**
     * Get cycles.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCycles()
    {
        return $this->cycles;
    }

    /**
     * Add cyclesAsFather.
     *
     * @param \AppBundle\Entity\Cycle $cyclesAsFather
     *
     * @return FosUser
     */
    public function addCyclesAsFather(\AppBundle\Entity\Cycle $cyclesAsFather)
    {
        $this->cyclesAsFather[] = $cyclesAsFather;

        return $this;
    }

    /**
     * Remove cyclesAsFather.
     *
     * @param \AppBundle\Entity\Cycle $cyclesAsFather
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeCyclesAsFather(\AppBundle\Entity\Cycle $cyclesAsFather)
    {
        return $this->cyclesAsFather->removeElement($cyclesAsFather);
    }

    /**
     * Get cyclesAsFather.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCyclesAsFather()
    {
        return $this->cyclesAsFather;
    }

    /**
     * Add cyclesAsGrandpa.
     *
     * @param \AppBundle\Entity\Cycle $cyclesAsGrandpa
     *
     * @return FosUser
     */
    public function addCyclesAsGrandpa(\AppBundle\Entity\Cycle $cyclesAsGrandpa)
    {
        $this->cyclesAsGrandpa[] = $cyclesAsGrandpa;

        return $this;
    }

    /**
     * Remove cyclesAsGrandpa.
     *
     * @param \AppBundle\Entity\Cycle $cyclesAsGrandpa
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeCyclesAsGrandpa(\AppBundle\Entity\Cycle $cyclesAsGrandpa)
    {
        return $this->cyclesAsGrandpa->removeElement($cyclesAsGrandpa);
    }

    /**
     * Get cyclesAsGrandpa.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCyclesAsGrandpa()
    {
        return $this->cyclesAsGrandpa;
    }

    /**
     * Add referral.
     *
     * @param \AppBundle\Entity\Referral $referral
     *
     * @return FosUser
     */
    public function addReferral(\AppBundle\Entity\Referral $referral)
    {
        $this->referrals[] = $referral;

        return $this;
    }

    /**
     * Remove referral.
     *
     * @param \AppBundle\Entity\Referral $referral
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeReferral(\AppBundle\Entity\Referral $referral)
    {
        return $this->referrals->removeElement($referral);
    }

    /**
     * Get referrals.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getReferrals()
    {
        return $this->referrals;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $invoices;

    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $cashouts;


    /**
     * Add invoice.
     *
     * @param \AppBundle\Entity\Invoice $invoice
     *
     * @return FosUser
     */
    public function addInvoice(\AppBundle\Entity\Invoice $invoice)
    {
        $this->invoices[] = $invoice;

        return $this;
    }

    /**
     * Remove invoice.
     *
     * @param \AppBundle\Entity\Invoice $invoice
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeInvoice(\AppBundle\Entity\Invoice $invoice)
    {
        return $this->invoices->removeElement($invoice);
    }

    /**
     * Get invoices.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getInvoices()
    {
        return $this->invoices;
    }

    /**
     * Add cashout.
     *
     * @param \AppBundle\Entity\Invoice $cashout
     *
     * @return FosUser
     */
    public function addCashout(\AppBundle\Entity\Invoice $cashout)
    {
        $this->cashouts[] = $cashout;

        return $this;
    }

    /**
     * Remove cashout.
     *
     * @param \AppBundle\Entity\Invoice $cashout
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeCashout(\AppBundle\Entity\Invoice $cashout)
    {
        return $this->cashouts->removeElement($cashout);
    }

    /**
     * Get cashouts.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getCashouts()
    {
        return $this->cashouts;
    }
    /**
     * @var \DateTime|null
     */
    private $registeredAt;


    /**
     * Set registeredAt.
     *
     * @param \DateTime|null $registeredAt
     *
     * @return FosUser
     */
    public function setRegisteredAt($registeredAt = null)
    {
        $this->registeredAt = $registeredAt;

        return $this;
    }

    /**
     * Get registeredAt.
     *
     * @return \DateTime|null
     */
    public function getRegisteredAt()
    {
        return $this->registeredAt;
    }
    /**
     * @var \DateTime|null
     */
    private $notificationAt;


    /**
     * Set notificationAt.
     *
     * @param \DateTime|null $notificationAt
     *
     * @return FosUser
     */
    public function setNotificationAt($notificationAt = null)
    {
        $this->notificationAt = $notificationAt;

        return $this;
    }

    /**
     * Get notificationAt.
     *
     * @return \DateTime|null
     */
    public function getNotificationAt()
    {
        return $this->notificationAt;
    }
    
    public function getActiveCycles(){
      $activeCycles = [];
      foreach($this->cycles as $cycle){
        if($cycle->getPosition() == 1 && $cycle->getState() == 1){
          array_push($activeCycles, $cycle);
        }
      }
      return $activeCycles;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $sponsorCycles;


    /**
     * Add sponsorCycle.
     *
     * @param \AppBundle\Entity\Cycle $sponsorCycle
     *
     * @return FosUser
     */
    public function addSponsorCycle(\AppBundle\Entity\Cycle $sponsorCycle)
    {
        $this->sponsorCycles[] = $sponsorCycle;

        return $this;
    }

    /**
     * Remove sponsorCycle.
     *
     * @param \AppBundle\Entity\Cycle $sponsorCycle
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeSponsorCycle(\AppBundle\Entity\Cycle $sponsorCycle)
    {
        return $this->sponsorCycles->removeElement($sponsorCycle);
    }

    /**
     * Get sponsorCycles.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSponsorCycles()
    {
        return $this->sponsorCycles;
    }
    /**
     * @var bool|null
     */
    private $isActive = 0;

    /**
     * @var bool|null
     */
    private $isInCycle = 0;


    /**
     * Set isActive.
     *
     * @param bool|null $isActive
     *
     * @return FosUser
     */
    public function setIsActive($isActive = null)
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Get isActive.
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->isActive;
    }

    /**
     * Set isInCycle.
     *
     * @param bool|null $isInCycle
     *
     * @return FosUser
     */
    public function setIsInCycle($isInCycle = null)
    {
        $this->isInCycle = $isInCycle;

        return $this;
    }

    /**
     * Get isInCycle.
     *
     * @return bool|null
     */
    public function getIsInCycle()
    {
        return $this->isInCycle;
    }
    /**
     * @var string|null
     */
    private $payday;


    /**
     * Set payday.
     *
     * @param string|null $payday
     *
     * @return FosUser
     */
    public function setPayday($payday = null)
    {
        $this->payday = $payday;

        return $this;
    }

    /**
     * Get payday.
     *
     * @return string|null
     */
    public function getPayday()
    {
        return $this->payday;
    }
    
    public function isParentOf(FosUser $user){
      $enabled = false;
      $ciclos = $user->getActiveCycles();
      while(count($ciclos)){
        $nuevosCiclos = array();
        foreach($ciclos as $ciclo){
          $sponsor = $ciclo->getSponsor();
          if($sponsor){
            if($sponsor->getId() == $this->getId()){
              return true;
//              $enabled = true;
//              break 2;
            }else{
              $ciclosSponsor = $sponsor->getCycles();
              foreach($ciclosSponsor as $cs){
                array_push($nuevosCiclos, $cs);
              }
            }
          }
        }
        $ciclos = $nuevosCiclos;
      }
      return $enabled;
    }
    
    public function canShowCycles2(FosUser $user){
      $enabled = false;
      $ciclos = $user->getActiveCycles();
//      var_dump('#ciclos: '.count($ciclos));
      for($i = 0; $i < 2; $i++){
        $nuevosCiclos = array();
        foreach($ciclos as $ciclo){
//          echo('<br>Ciclo: '.$ciclo->getId().' => Sponsor: ');
          $sponsor = $ciclo->getSponsor();
          if($sponsor){
//            echo($sponsor->getName());
            if($sponsor->getId() == $this->getId()){
              return true;
//              $enabled = true;
//              break 2;
            }else{
              $ciclosSponsor = $sponsor->getActiveCycles();
              foreach($ciclosSponsor as $cs){
                array_push($nuevosCiclos, $cs);
              }
            }
          }
//          echo '<br>';
        }
        $ciclos = $nuevosCiclos;
      }
      return $enabled;
    }
    
    public function canShowCycle(Cycle $cycle){
      if($cycle->getCycleUser()->getId() == $this->id){
        return true;
      }
      $enabled = false;
//      $user = $cycle->getCycleUser();
      $sponsor = $cycle->getSponsor();
      while($sponsor){
        if($sponsor->getId() == $this->id){
          $enabled = true;
          break;
        }
        $sponsorCycles = $sponsor->getActiveCycles();
        foreach($sponsorCycles as $sp){
          if($sp->getPlan()->getId() == $cycle->getPlan()->getId()){
//            $cycle = $sp;
            $sponsor = $sp->getSponsor();
            break;
          }else{
            $sponsor = null;
          }
        }
      }
      return $enabled;
    }
    
//    public function getParentOf(FosUser $user){
//      $parent = null;
//      $ciclos = $user->getActiveCycles();
//      while(count($ciclos)){
//        $nuevosCiclos = array();
//        foreach($ciclos as $ciclo){
//          $sponsor = $ciclo->getSponsor();
//          if($sponsor){
//            if($sponsor->getId() == $this->getId()){
//              $parent = $ciclo->getCycleUser();
//              break 2;
//            }else{
//              $ciclosSponsor = $sponsor->getActiveCycles();
//              foreach($ciclosSponsor as $cs){
//                array_push($nuevosCiclos, $cs);
//              }
//            }
//          }
//        }
//        $ciclos = $nuevosCiclos;
//      }
//      return $parent;
//    }
    

    /**
     * Set docFront.
     *
     * @param string|null $docFront
     *
     * @return FosUser
     */
    public function setDocFront($docFront = null)
    {
        $this->docFront = $docFront;

        return $this;
    }

    /**
     * Get docFront.
     *
     * @return string|null
     */
    public function getDocFront()
    {
        return $this->docFront;
    }

    /**
     * Set docBack.
     *
     * @param string|null $docBack
     *
     * @return FosUser
     */
    public function setDocBack($docBack = null)
    {
        $this->docBack = $docBack;

        return $this;
    }

    /**
     * Get docBack.
     *
     * @return string|null
     */
    public function getDocBack()
    {
        return $this->docBack;
    }

    /**
     * Set bankCert.
     *
     * @param string|null $bankCert
     *
     * @return FosUser
     */
    public function setBankCert($bankCert = null)
    {
        $this->bankCert = $bankCert;

        return $this;
    }

    /**
     * Get bankCert.
     *
     * @return string|null
     */
    public function getBankCert()
    {
        return $this->bankCert;
    }

    /**
     * Set bankAccount.
     *
     * @param string|null $bankAccount
     *
     * @return FosUser
     */
    public function setBankAccount($bankAccount = null)
    {
        $this->bankAccount = $bankAccount;

        return $this;
    }

    /**
     * Get bankAccount.
     *
     * @return string|null
     */
    public function getBankAccount()
    {
        return $this->bankAccount;
    }

    /**
     * Set bankHolder.
     *
     * @param string|null $bankHolder
     *
     * @return FosUser
     */
    public function setBankHolder($bankHolder = null)
    {
        $this->bankHolder = $bankHolder;

        return $this;
    }

    /**
     * Get bankHolder.
     *
     * @return string|null
     */
    public function getBankHolder()
    {
        return $this->bankHolder;
    }

    /**
     * Set bankType.
     *
     * @param string|null $bankType
     *
     * @return FosUser
     */
    public function setBankType($bankType = null)
    {
        $this->bankType = $bankType;

        return $this;
    }

    /**
     * Get bankType.
     *
     * @return string|null
     */
    public function getBankType()
    {
        return $this->bankType;
    }

    /**
     * Set isInBinary.
     *
     * @param bool|null $isInBinary
     *
     * @return FosUser
     */
    public function setIsInBinary($isInBinary = null)
    {
        $this->isInBinary = $isInBinary;

        return $this;
    }

    /**
     * Get isInBinary.
     *
     * @return bool|null
     */
    public function getIsInBinary()
    {
        return $this->isInBinary;
    }

    /**
     * Set isDocChecked.
     *
     * @param bool|null $isDocChecked
     *
     * @return FosUser
     */
    public function setIsDocChecked($isDocChecked = null)
    {
        $this->isDocChecked = $isDocChecked;

        return $this;
    }

    /**
     * Get isDocChecked.
     *
     * @return bool|null
     */
    public function getIsDocChecked()
    {
        return $this->isDocChecked;
    }

    /**
     * Set updatedAt.
     *
     * @param \DateTime|null $updatedAt
     *
     * @return FosUser
     */
    public function setUpdatedAt($updatedAt = null)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt.
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }
    
    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * 
     * @Vich\UploadableField(mapping="fos_user_image", fileNameProperty="image")
     * 
     * @var File
     */
    private $avatar;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile $image
     *
     * @return FosUser
     */
    public function setAvatar(File $image = null)
    {
        $this->avatar = $image;

        if ($image) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }

        return $this;
    }

    /**
     * @return File|null
     */
    public function getAvatar()
    {
        return $this->avatar;
    }
    
    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * 
     * @Vich\UploadableField(mapping="fos_user_doc_front", fileNameProperty="doc_front")
     * 
     * @var File
     */
    private $ccFront;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile $doc_front
     *
     * @return FosUser
     */
    public function setCcFront(File $doc_front = null)
    {
        $this->ccFront = $doc_front;

        if ($doc_front) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }

        return $this;
    }

    /**
     * @return File|null
     */
    public function getCcFront()
    {
        return $this->ccFront;
    }
    
    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * 
     * @Vich\UploadableField(mapping="fos_user_doc_back", fileNameProperty="doc_back")
     * 
     * @var File
     */
    private $ccBack;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile $doc_back
     *
     * @return FosUser
     */
    public function setCcBack(File $doc_back = null)
    {
        $this->ccBack = $doc_back;

        if ($doc_back) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }

        return $this;
    }

    /**
     * @return File|null
     */
    public function getCcBack()
    {
        return $this->ccBack;
    }
    
    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * 
     * @Vich\UploadableField(mapping="fos_user_bank_cert", fileNameProperty="bank_cert")
     * 
     * @var File
     */
    private $certBank;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile $bank_cert
     *
     * @return FosUser
     */
    public function setCertBank(File $bank_cert = null)
    {
        $this->certBank = $bank_cert;

        if ($bank_cert) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }

        return $this;
    }

    /**
     * @return File|null
     */
    public function getCertBank()
    {
        return $this->certBank;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $binaryPlans;


    /**
     * Add binaryPlan.
     *
     * @param \AppBundle\Entity\BinaryPlanUser $binaryPlan
     *
     * @return FosUser
     */
    public function addBinaryPlan(\AppBundle\Entity\BinaryPlanUser $binaryPlan)
    {
        $this->binaryPlans[] = $binaryPlan;

        return $this;
    }

    /**
     * Remove binaryPlan.
     *
     * @param \AppBundle\Entity\BinaryPlanUser $binaryPlan
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeBinaryPlan(\AppBundle\Entity\BinaryPlanUser $binaryPlan)
    {
        return $this->binaryPlans->removeElement($binaryPlan);
    }

    /**
     * Get binaryPlans.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBinaryPlans()
    {
        return $this->binaryPlans;
    }
    
    public function getBinaryPlan()
    {
        if(count($this->binaryPlans)){
          return $this->binaryPlans[0];
        }
        return null;
    }
    /**
     * @var \Doctrine\Common\Collections\Collection
     */
    private $sponsorBinaries;


    /**
     * Add sponsorBinary.
     *
     * @param \AppBundle\Entity\BinaryPayment $sponsorBinary
     *
     * @return FosUser
     */
    public function addSponsorBinary(\AppBundle\Entity\BinaryPayment $sponsorBinary)
    {
        $this->sponsorBinaries[] = $sponsorBinary;

        return $this;
    }

    /**
     * Remove sponsorBinary.
     *
     * @param \AppBundle\Entity\BinaryPayment $sponsorBinary
     *
     * @return boolean TRUE if this collection contained the specified element, FALSE otherwise.
     */
    public function removeSponsorBinary(\AppBundle\Entity\BinaryPayment $sponsorBinary)
    {
        return $this->sponsorBinaries->removeElement($sponsorBinary);
    }

    /**
     * Get sponsorBinaries.
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getSponsorBinaries()
    {
        return $this->sponsorBinaries;
    }

    /**
     * Set binaryBalance.
     *
     * @param float|null $binaryBalance
     *
     * @return FosUser
     */
    public function setBinaryBalance($binaryBalance = null)
    {
        $this->binaryBalance = $binaryBalance;

        return $this;
    }

    /**
     * Get binaryBalance.
     *
     * @return float|null
     */
    public function getBinaryBalance()
    {
        return $this->binaryBalance;
    }

    /**
     * Set binaryCeil.
     *
     * @param float|null $binaryCeil
     *
     * @return FosUser
     */
    public function setBinaryCeil($binaryCeil = null)
    {
        $this->binaryCeil = $binaryCeil;

        return $this;
    }

    /**
     * Get binaryCeil.
     *
     * @return float|null
     */
    public function getBinaryCeil()
    {
        return $this->binaryCeil;
    }

    /**
     * Set isBinaryOverflow.
     *
     * @param bool|null $isBinaryOverflow
     *
     * @return FosUser
     */
    public function setIsBinaryOverflow($isBinaryOverflow = null)
    {
        $this->isBinaryOverflow = $isBinaryOverflow;

        return $this;
    }

    /**
     * Get isBinaryOverflow.
     *
     * @return bool|null
     */
    public function getIsBinaryOverflow()
    {
        return $this->isBinaryOverflow;
    }
    /**
     * @var float|null
     */
    private $binaryTotal = 0;


    /**
     * Set binaryTotal.
     *
     * @param float|null $binaryTotal
     *
     * @return FosUser
     */
    public function setBinaryTotal($binaryTotal = null)
    {
        $this->binaryTotal = $binaryTotal;

        return $this;
    }

    /**
     * Get binaryTotal.
     *
     * @return float|null
     */
    public function getBinaryTotal()
    {
        return $this->binaryTotal;
    }

    /**
     * Set nivel.
     *
     * @param string|null $nivel
     *
     * @return FosUser
     */
    public function setNivel($nivel = null)
    {
        $this->nivel = $nivel;

        return $this;
    }

    /**
     * Get nivel.
     *
     * @return string|null
     */
    public function getNivel()
    {
        return $this->nivel;
    }
    /**
     * @var string|null
     */
    private $binaryPayday;


    /**
     * Set binaryPayday.
     *
     * @param string|null $binaryPayday
     *
     * @return FosUser
     */
    public function setBinaryPayday($binaryPayday = null)
    {
        $this->binaryPayday = $binaryPayday;

        return $this;
    }

    /**
     * Get binaryPayday.
     *
     * @return string|null
     */
    public function getBinaryPayday()
    {
        return $this->binaryPayday;
    }
}
